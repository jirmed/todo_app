name: CI Build and deploy

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  packages: write

jobs:
  build:
    name: Build & Push (${{ matrix.name }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: backend
            context: ./backend
            image_name: todo-backend
            cache_scope: backend
          - name: frontend
            context: ./frontend
            image_name: todo-frontend
            cache_scope: frontend
          - name: proxy
            context: ./nginx
            image_name: todo-proxy
            cache_scope: proxy

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Standardizované generování tagů/labelů (žádné vlastní 'list'/'image')
      - name: Docker meta (${{ matrix.name }})
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ matrix.image_name }}
          tags: |
            # latest jen mimo tagy, ať release neprepíše latest
            type=raw,value=latest,enable=${{ github.ref_type != 'tag' }}
            # vždy přidej sha-<short>
            type=sha,prefix=sha-,format=short
            # Semver z refu (vX.Y.Z) + přidej 'v' prefix do vydaných tagů
            type=semver,pattern={{version}},prefix=v
            type=semver,pattern={{major}}.{{minor}},prefix=v
            type=semver,pattern={{major}},prefix=v
      

      # APP_VERSION & BUILD_DATE & (jen na tag push) GIT_TAG
      - name: Derive app version and build date (backend)
        id: ver
        shell: bash
        run: |
          set -euo pipefail
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            RAW="${GITHUB_REF_NAME#v}"   # X.Y.Z
            APPV="${RAW}"
            GIT_TAG_ARG="GIT_TAG=${GITHUB_REF_NAME}"
            MODE="tag"
          else
            RAW=$(tr -d '\r' < backend/CMakeLists.txt \
              | sed -nE 's/^[[:space:]]*project\([^)]*VERSION[[:space:]]+([0-9]+\.[0-9]+\.[0-9]+).*$/\1/p' \
              | head -n1 || true)
            [[ -n "${RAW:-}" ]] || RAW="1.0.0"
            APPV="${RAW}-SNAPSHOT"
            GIT_TAG_ARG=""
            MODE="branch"
          fi
          BD=$(date -u +%FT%TZ)
          echo "app_version=${APPV}"        >> "$GITHUB_OUTPUT"
          echo "build_date=${BD}"           >> "$GITHUB_OUTPUT"
          echo "git_tag_arg=${GIT_TAG_ARG}" >> "$GITHUB_OUTPUT"
          echo "Derived APP_VERSION='${APPV}' (mode=${MODE})"

      - name: Build and push ${{ matrix.name }} image
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.context }}
          push: true
          platforms: linux/arm64,linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            APP_VERSION=${{ steps.ver.outputs.app_version }}
            VCS_REF=${{ github.sha }}
            BUILD_DATE=${{ steps.ver.outputs.build_date }}
            ${{ steps.ver.outputs.git_tag_arg }}
          cache-from: |
            type=gha,scope=${{ matrix.cache_scope }}
            type=registry,ref=ghcr.io/${{ github.repository_owner }}/${{ matrix.image_name }}:latest
          cache-to: type=gha,mode=max,scope=${{ matrix.cache_scope }}

  deploy:
    name: Deploy stack over SSH (prod)
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' && github.ref_type == 'tag'   # ← jen na tag
    env:
      SSH_USER: ubuntu
      SSH_HOST: ${{ vars.host_ip }}
      REMOTE_DIR: /home/ubuntu
      STACK_NAME: todoapp
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Start ssh-agent and add key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}

      - name: Add server to known_hosts
        run: ssh-keyscan -H "$SSH_HOST" >> ~/.ssh/known_hosts

      - name: Sync compose files
        run: |
          rsync -avz --delete \
            docker-compose.yaml docker-compose.prod.yaml \
            "${SSH_USER}@${SSH_HOST}:${REMOTE_DIR}/"

      - name: Deploy stack (tag to prod)
        if: github.event_name != 'pull_request' && github.ref_type == 'tag'
        env:
          GHCR_USER: ${{ secrets.GHCR_USER }}
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
        run: |
          ssh -o StrictHostKeyChecking=yes "${SSH_USER}@${SSH_HOST}" "
            set -euo pipefail
            echo '${GHCR_TOKEN}' | docker login ghcr.io -u '${GHCR_USER}' --password-stdin
            export REVISION='${{ github.sha }}'
            export IMAGE_TAG='${{ github.ref_name }}'   # např. v1.0.4
            docker stack deploy --with-registry-auth --prune --resolve-image changed \
              -c ${REMOTE_DIR}/docker-compose.yaml \
              -c ${REMOTE_DIR}/docker-compose.prod.yaml ${STACK_NAME}
          "
      
